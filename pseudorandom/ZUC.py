# -*- encoding: utf-8 -*-
'''
@File    :   ZUC.py
@Time    :   2023/04/06 16:59:51
@Author  :   zeroc 
'''
S0 = [
    [0x3E, 0x72, 0x5B, 0x47, 0xCA, 0xE0, 0x00, 0x33,
     0x04, 0xD1, 0x54, 0x98, 0x09, 0xB9, 0x6D, 0xCB],
    [0x7B, 0x1B, 0xF9, 0x32, 0xAF, 0x9D, 0x6A, 0xA5,
     0xB8, 0x2D, 0xFC, 0x1D, 0x08, 0x53, 0x03, 0x90],
    [0x4D, 0x4E, 0x84, 0x99, 0xE4, 0xCE, 0xD9, 0x91,
     0xDD, 0xB6, 0x85, 0x48, 0x8B, 0x29, 0x6E, 0xAC],
    [0xCD, 0xC1, 0xF8, 0x1E, 0x73, 0x43, 0x69, 0xC6,
     0xB5, 0xBD, 0xFD, 0x39, 0x63, 0x20, 0xD4, 0x38],
    [0x76, 0x7D, 0xB2, 0xA7, 0xCF, 0xED, 0x57, 0xC5,
     0xF3, 0x2C, 0xBB, 0x14, 0x21, 0x06, 0x55, 0x9B],
    [0xE3, 0xEF, 0x5E, 0x31, 0x4F, 0x7F, 0x5A, 0xA4,
     0x0D, 0x82, 0x51, 0x49, 0x5F, 0xBA, 0x58, 0x1C],
    [0x4A, 0x16, 0xD5, 0x17, 0xA8, 0x92, 0x24, 0x1F,
     0x8C, 0xFF, 0xD8, 0xAE, 0x2E, 0x01, 0xD3, 0xAD],
    [0x3B, 0x4B, 0xDA, 0x46, 0xEB, 0xC9, 0xDE, 0x9A,
     0x8F, 0x87, 0xD7, 0x3A, 0x80, 0x6F, 0x2F, 0xC8],
    [0xB1, 0xB4, 0x37, 0xF7, 0x0A, 0x22, 0x13, 0x28,
     0x7C, 0xCC, 0x3C, 0x89, 0xC7, 0xC3, 0x96, 0x56],
    [0x07, 0xBF, 0x7E, 0xF0, 0x0B, 0x2B, 0x97, 0x52,
     0x35, 0x41, 0x79, 0x61, 0xA6, 0x4C, 0x10, 0xFE],
    [0xBC, 0x26, 0x95, 0x88, 0x8A, 0xB0, 0xA3, 0xFB,
     0xC0, 0x18, 0x94, 0xF2, 0xE1, 0xE5, 0xE9, 0x5D],
    [0xD0, 0xDC, 0x11, 0x66, 0x64, 0x5C, 0xEC, 0x59,
     0x42, 0x75, 0x12, 0xF5, 0x74, 0x9C, 0xAA, 0x23],
    [0x0E, 0x86, 0xAB, 0xBE, 0x2A, 0x02, 0xE7, 0x67,
     0xE6, 0x44, 0xA2, 0x6C, 0xC2, 0x93, 0x9F, 0xF1],
    [0xF6, 0xFA, 0x36, 0xD2, 0x50, 0x68, 0x9E, 0x62,
     0x71, 0x15, 0x3D, 0xD6, 0x40, 0xC4, 0xE2, 0x0F],
    [0x8E, 0x83, 0x77, 0x6B, 0x25, 0x05, 0x3F, 0x0C,
     0x30, 0xEA, 0x70, 0xB7, 0xA1, 0xE8, 0xA9, 0x65],
    [0x8D, 0x27, 0x1A, 0xDB, 0x81, 0xB3, 0xA0, 0xF4,
     0x45, 0x7A, 0x19, 0xDF, 0xEE, 0x78, 0x34, 0x60]
]

S1 = [
    [0x55, 0xC2, 0x63, 0x71, 0x3B, 0xC8, 0x47, 0x86,
     0x9F, 0x3C, 0xDA, 0x5B, 0x29, 0xAA, 0xFD, 0x77],
    [0x8C, 0xC5, 0x94, 0x0C, 0xA6, 0x1A, 0x13, 0x00,
     0xE3, 0xA8, 0x16, 0x72, 0x40, 0xF9, 0xF8, 0x42],
    [0x44, 0x26, 0x68, 0x96, 0x81, 0xD9, 0x45, 0x3E,
     0x10, 0x76, 0xC6, 0xA7, 0x8B, 0x39, 0x43, 0xE1],
    [0x3A, 0xB5, 0x56, 0x2A, 0xC0, 0x6D, 0xB3, 0x05,
     0x22, 0x66, 0xBF, 0xDC, 0x0B, 0xFA, 0x62, 0x48],
    [0xDD, 0x20, 0x11, 0x06, 0x36, 0xC9, 0xC1, 0xCF,
     0xF6, 0x27, 0x52, 0xBB, 0x69, 0xF5, 0xD4, 0x87],
    [0x7F, 0x84, 0x4C, 0xD2, 0x9C, 0x57, 0xA4, 0xBC,
     0x4F, 0x9A, 0xDF, 0xFE, 0xD6, 0x8D, 0x7A, 0xEB],
    [0x2B, 0x53, 0xD8, 0x5C, 0xA1, 0x14, 0x17, 0xFB,
     0x23, 0xD5, 0x7D, 0x30, 0x67, 0x73, 0x08, 0x09],
    [0xEE, 0xB7, 0x70, 0x3F, 0x61, 0xB2, 0x19, 0x8E,
     0x4E, 0xE5, 0x4B, 0x93, 0x8F, 0x5D, 0xDB, 0xA9],
    [0xAD, 0xF1, 0xAE, 0x2E, 0xCB, 0x0D, 0xFC, 0xF4,
     0x2D, 0x46, 0x6E, 0x1D, 0x97, 0xE8, 0xD1, 0xE9],
    [0x4D, 0x37, 0xA5, 0x75, 0x5E, 0x83, 0x9E, 0xAB,
     0x82, 0x9D, 0xB9, 0x1C, 0xE0, 0xCD, 0x49, 0x89],
    [0x01, 0xB6, 0xBD, 0x58, 0x24, 0xA2, 0x5F, 0x38,
     0x78, 0x99, 0x15, 0x90, 0x50, 0xB8, 0x95, 0xE4],
    [0xD0, 0x91, 0xC7, 0xCE, 0xED, 0x0F, 0xB4, 0x6F,
     0xA0, 0xCC, 0xF0, 0x02, 0x4A, 0x79, 0xC3, 0xDE],
    [0xA3, 0xEF, 0xEA, 0x51, 0xE6, 0x6B, 0x18, 0xEC,
     0x1B, 0x2C, 0x80, 0xF7, 0x74, 0xE7, 0xFF, 0x21],
    [0x5A, 0x6A, 0x54, 0x1E, 0x41, 0x31, 0x92, 0x35,
     0xC4, 0x33, 0x07, 0x0A, 0xBA, 0x7E, 0x0E, 0x34],
    [0x88, 0xB1, 0x98, 0x7C, 0xF3, 0x3D, 0x60, 0x6C,
     0x7B, 0xCA, 0xD3, 0x1F, 0x32, 0x65, 0x04, 0x28],
    [0x64, 0xBE, 0x85, 0x9B, 0x2F, 0x59, 0x8A, 0xD7,
     0xB0, 0x25, 0xAC, 0xAF, 0x12, 0x03, 0xE2, 0xF2]
]

d = [0b100010011010111, 0b010011010111100, 0b110001001101011,
     0b001001101011110, 0b101011110001001, 0b011010111100010,
     0b111000100110101, 0b000100110101111, 0b100110101111000,
     0b010111100010011, 0b110101111000100, 0b001101011110001,
     0b101111000100110, 0b011110001001101, 0b111100010011010,
     0b100011110101100]


def S(x, SBox):
    return SBox[x >> 4][x & 0xf]


class ZUC:
    # initialize the ZUC class
    def __init__(self, key: int, iv: int) -> None:
        self.key = key
        self.iv = iv
        self.lfsr = []
        self.R1 = 0
        self.R2 = 0

    # get initial state of LFSR
    def _GetLFSR(self):
        k, v = [], []
        for i in range(16):
            k.append(self.key >> (i * 8) & 0xff)
            v.append(self.iv >> (i * 8) & 0xff)
        k, v = k[::-1], v[::-1]
        for i in range(16):
            self.lfsr.append(k[i] << 23 | d[i] << 8 | v[i])

    # BitReconstruction
    def _BitReconstruction(self):
        X0 = ((self.lfsr[15] >> 15) << 16) | (self.lfsr[14] & 0xffff)
        X1 = (self.lfsr[11] & 0xffff) << 16 | (self.lfsr[9] >> 15)
        X2 = (self.lfsr[7] & 0xffff) << 16 | (self.lfsr[5] >> 15)
        X3 = (self.lfsr[2] & 0xffff) << 16 | (self.lfsr[0] >> 15)
        return X0, X1, X2, X3

    # Left Rotation
    def _LeftRotation(self, x: int, n: int) -> int:
        return ((x << n) | (x >> (32 - n))) & 0xffffffff

    # Linear Transformation L1
    def _L1(self, x: int) -> int:
        return x ^ self._LeftRotation(x, 2) ^ self._LeftRotation(x, 10) ^ self._LeftRotation(x, 18) ^ self._LeftRotation(x, 24)

    # Linear Transformation L2
    def _L2(self, x: int) -> int:
        return x ^ self._LeftRotation(x, 8) ^ self._LeftRotation(x, 14) ^ self._LeftRotation(x, 22) ^ self._LeftRotation(x, 30)

    # Bytes Substitution
    def _S(self, x: int) -> int:
        return S(x >> 24, S0) << 24 | S((x >> 16) & 0xff, S1) << 16 | S((x >> 8) & 0xff, S0) << 8 | S(x & 0xff, S1)

    # Unlinear Transformation F
    def _F(self, X0: int, X1: int, X2: int) -> int:
        W = ((X0 ^ self.R1) + self.R2) % (2 ** 32)
        W1 = (self.R1 + X1) % (2 ** 32)
        W2 = self.R2 ^ X2
        self.R1 = self._S(self._L1((W1 & (0xffff)) << 16 | (W2 >> 16)))
        self.R2 = self._S(self._L2((W2 & (0xffff)) << 16 | (W1 >> 16)))
        return W & 0xffffffff

    # LFSR InitMode
    def _LFSRInitMode(self, W: int):
        u = W >> 1
        v = ((2 ** 15) * self.lfsr[15] + (2 ** 17) * self.lfsr[13] + (2 ** 21) *
             self.lfsr[10] + (2 ** 20) * self.lfsr[4] + 257 * self.lfsr[0]) % (2 ** 31 - 1)
        tmp = (u + v) % (2 ** 31 - 1)
        tmp = 2 ** 31 - 1 if tmp == 0 else tmp
        self.lfsr.append(tmp)
        self.lfsr.pop(0)

    # LFSR WorkMode
    def _LFSRWorkMode(self):
        tmp = ((2 ** 15) * self.lfsr[15] + (2 ** 17) * self.lfsr[13] + (2 ** 21) *
               self.lfsr[10] + (2 ** 20) * self.lfsr[4] + 257 * self.lfsr[0]) % (2 ** 31 - 1)
        tmp = 2 ** 31 - 1 if tmp == 0 else tmp
        self.lfsr.append(tmp)
        self.lfsr.pop(0)

    # ZUC Initialization
    def _ZUCInit(self):
        self._GetLFSR()
        for _ in range(32):
            X0, X1, X2, X3 = self._BitReconstruction()
            W = self._F(X0, X1, X2)
            self._LFSRInitMode(W)

    # ZUC key stream generation
    def ZUCGen(self, count: int) -> list:
        self._ZUCInit()
        X0, X1, X2, X3 = self._BitReconstruction()
        self._F(X0, X1, X2)
        self._LFSRWorkMode()
        keystream = []
        for _ in range(count):
            X0, X1, X2, X3 = self._BitReconstruction()
            keystream.append(self._F(X0, X1, X2) ^ X3)
            self._LFSRWorkMode()
        return keystream


if __name__ == "__main__":
    key = int(input().strip()[2:], 16)
    iv = int(input().strip()[2:], 16)
    count = int(input().strip())
    zuc = ZUC(key, iv)
    keystream = zuc.ZUCGen(count)
    for i in keystream:
        print("0x" + hex(i)[2:].rjust(8, "0"))
